#!/usr/bin/env python3
"""
Utilit√°rios para o sistema de an√°lise de relat√≥rios de seguran√ßa
"""

import os
import json
import shutil
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, List

def clean_output_files():
    """Remove todos os arquivos de sa√≠da gerados"""
    output_files = [
        "vulnerabilities.json",
        "network_analysis.md",
        "web_analysis.md", 
        "infra_analysis.md",
        "relatorio_final_seguranca.md",
        "test_output_nmap.json",
        "test_output_nessus.json",
        "test_output_wireshark.json"
    ]
    
    removed_count = 0
    for file in output_files:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è  Removido: {file}")
            removed_count += 1
    
    # Limpar diret√≥rio output se existir
    output_dir = Path("output")
    if output_dir.exists():
        for file in output_dir.glob("*"):
            if file.is_file():
                file.unlink()
                print(f"üóëÔ∏è  Removido: {file}")
                removed_count += 1
    
    print(f"‚úÖ {removed_count} arquivos removidos")

def clean_temp_files():
    """Remove arquivos tempor√°rios"""
    temp_dirs = ["temp", "logs", "__pycache__"]
    removed_count = 0
    
    for temp_dir in temp_dirs:
        if os.path.exists(temp_dir):
            if temp_dir == "__pycache__":
                shutil.rmtree(temp_dir)
                print(f"üóëÔ∏è  Removido diret√≥rio: {temp_dir}")
                removed_count += 1
            else:
                # Limpar conte√∫do mas manter diret√≥rio
                for file in Path(temp_dir).glob("*"):
                    if file.is_file():
                        file.unlink()
                        removed_count += 1
    
    print(f"‚úÖ {removed_count} arquivos tempor√°rios removidos")

def generate_sample_report():
    """Gera um relat√≥rio de amostra para teste"""
    sample_vulnerabilities = [
        {
            "id": "SAMPLE-001",
            "titulo": "Porta SSH aberta com configura√ß√£o insegura",
            "descricao": "O servi√ßo SSH est√° executando na porta padr√£o 22 com configura√ß√µes que podem permitir ataques de for√ßa bruta.",
            "tipo_preliminar": "Rede",
            "dados_brutos": "22/tcp open ssh OpenSSH 7.4",
            "ip_origem": "192.168.1.100",
            "porta": "22",
            "protocolo": "tcp",
            "severidade": "M√©dio"
        },
        {
            "id": "SAMPLE-002", 
            "titulo": "Servidor web expondo informa√ß√µes de vers√£o",
            "descricao": "O servidor Apache est√° retornando informa√ß√µes detalhadas sobre sua vers√£o, facilitando ataques direcionados.",
            "tipo_preliminar": "Web",
            "dados_brutos": "80/tcp open http Apache httpd 2.4.6",
            "ip_origem": "192.168.1.100",
            "porta": "80", 
            "protocolo": "tcp",
            "severidade": "Baixo"
        },
        {
            "id": "SAMPLE-003",
            "titulo": "Banco MySQL acess√≠vel externamente",
            "descricao": "O servi√ßo MySQL est√° executando na porta 3306 e pode estar acess√≠vel da internet, representando um risco cr√≠tico de seguran√ßa.",
            "tipo_preliminar": "Infraestrutura",
            "dados_brutos": "3306/tcp open mysql MySQL 5.7.26",
            "ip_origem": "192.168.1.100",
            "porta": "3306",
            "protocolo": "tcp", 
            "severidade": "Alto"
        }
    ]
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"sample_report_{timestamp}.txt"
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("# Relat√≥rio de Seguran√ßa de Amostra\n")
        f.write(f"# Gerado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        for vuln in sample_vulnerabilities:
            f.write(f"Vulnerability: {vuln['titulo']}\n")
            f.write(f"Type: {vuln['tipo_preliminar']}\n")
            f.write(f"Severity: {vuln['severidade']}\n")
            f.write(f"Host: {vuln['ip_origem']}:{vuln['porta']}\n")
            f.write(f"Description: {vuln['descricao']}\n")
            f.write(f"Raw Data: {vuln['dados_brutos']}\n")
            f.write("\n" + "="*50 + "\n\n")
    
    print(f"‚úÖ Relat√≥rio de amostra gerado: {filename}")
    return filename

def validate_environment():
    """Valida se o ambiente est√° configurado corretamente"""
    print("üîç Validando ambiente...")
    
    issues = []
    
    # Verificar arquivos essenciais
    required_files = [
        "security_report_analyzer.py",
        "config.py", 
        "report_parsers.py",
        "requirements.txt"
    ]
    
    for file in required_files:
        if not os.path.exists(file):
            issues.append(f"Arquivo ausente: {file}")
    
    # Verificar diret√≥rios
    required_dirs = ["examples", "reports", "output", "temp", "logs"]
    for directory in required_dirs:
        if not os.path.exists(directory):
            try:
                os.makedirs(directory)
                print(f"üìÅ Criado diret√≥rio: {directory}")
            except Exception as e:
                issues.append(f"Erro ao criar diret√≥rio {directory}: {e}")
    
    # Verificar depend√™ncias Python
    try:
        import crewai
        print("‚úÖ CrewAI importado com sucesso")
    except ImportError:
        issues.append("CrewAI n√£o instalado - execute: pip install crewai")
    
    try:
        import langchain
        print("‚úÖ LangChain importado com sucesso")
    except ImportError:
        issues.append("LangChain n√£o instalado - execute: pip install langchain")
    
    # Verificar arquivo .env
    if not os.path.exists(".env"):
        if os.path.exists(".env.example"):
            shutil.copy(".env.example", ".env")
            print("üìù Arquivo .env criado a partir do .env.example")
            issues.append("Configure o arquivo .env com suas credenciais")
        else:
            issues.append("Arquivo .env n√£o encontrado")
    
    # Relat√≥rio final
    if issues:
        print("\n‚ùå Problemas encontrados:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
        return False
    else:
        print("\n‚úÖ Ambiente validado com sucesso!")
        return True

def show_statistics():
    """Mostra estat√≠sticas dos arquivos no projeto"""
    print("üìä Estat√≠sticas do Projeto")
    print("=" * 30)
    
    # Contar arquivos por tipo
    file_types = {
        ".py": 0,
        ".md": 0, 
        ".txt": 0,
        ".xml": 0,
        ".json": 0,
        ".log": 0,
        ".sh": 0,
        "outros": 0
    }
    
    total_files = 0
    total_size = 0
    
    for root, dirs, files in os.walk("."):
        # Ignorar diret√≥rios espec√≠ficos
        if any(ignore in root for ignore in [".git", "__pycache__", "venv", ".env"]):
            continue
            
        for file in files:
            file_path = os.path.join(root, file)
            total_files += 1
            
            try:
                size = os.path.getsize(file_path)
                total_size += size
            except:
                continue
            
            # Classificar por extens√£o
            ext = os.path.splitext(file)[1].lower()
            if ext in file_types:
                file_types[ext] += 1
            else:
                file_types["outros"] += 1
    
    print(f"Total de arquivos: {total_files}")
    print(f"Tamanho total: {total_size / 1024:.1f} KB")
    print("\nDistribui√ß√£o por tipo:")
    
    for ext, count in file_types.items():
        if count > 0:
            print(f"  {ext}: {count} arquivos")
    
    # Verificar exemplos
    examples_dir = Path("examples")
    if examples_dir.exists():
        example_files = list(examples_dir.glob("*"))
        print(f"\nArquivos de exemplo: {len(example_files)}")
        for file in example_files:
            size_kb = file.stat().st_size / 1024
            print(f"  ‚Ä¢ {file.name}: {size_kb:.1f} KB")

def main():
    """Fun√ß√£o principal com CLI"""
    parser = argparse.ArgumentParser(
        description="Utilit√°rios para o Sistema de An√°lise de Relat√≥rios de Seguran√ßa"
    )
    
    parser.add_argument(
        "action",
        choices=["clean", "clean-temp", "sample", "validate", "stats"],
        help="A√ß√£o a ser executada"
    )
    
    args = parser.parse_args()
    
    print("üõ†Ô∏è  Utilit√°rios do Sistema de An√°lise de Seguran√ßa")
    print("=" * 50)
    
    if args.action == "clean":
        print("üßπ Limpando arquivos de sa√≠da...")
        clean_output_files()
        
    elif args.action == "clean-temp":
        print("üßπ Limpando arquivos tempor√°rios...")
        clean_temp_files()
        
    elif args.action == "sample":
        print("üìù Gerando relat√≥rio de amostra...")
        filename = generate_sample_report()
        print(f"Use este arquivo para testar: python3 security_report_analyzer.py")
        
    elif args.action == "validate":
        print("üîç Validando ambiente...")
        if validate_environment():
            print("Ambiente pronto para uso!")
        else:
            print("Corrija os problemas antes de prosseguir.")
            
    elif args.action == "stats":
        show_statistics()

if __name__ == "__main__":
    main()
